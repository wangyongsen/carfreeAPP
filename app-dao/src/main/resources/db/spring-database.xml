<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="filters" value="config,log4j"/>
        <property name="connectionProperties" value="config.file=${jdbc.config}"/>
        <property name="proxyFilters">
            <list>
                <bean class="com.alibaba.druid.filter.stat.StatFilter">
                    <property name="slowSqlMillis" value="3000"/>
                    <property name="logSlowSql" value="true"/>
                    <property name="mergeSql" value="true" />
                </bean>
                <bean class="com.alibaba.druid.filter.logging.Slf4jLogFilter">
                    <property name="resultSetLogEnabled" value="true" />
                    <property name="statementExecutableSqlLogEnable" value="true" />
                </bean>
                <bean class="com.alibaba.druid.wall.WallFilter"/>
            </list>
        </property>
        <property name="initialSize" value="${jdbc.initialSize}"/>      <!-- 初始化连接大小 -->
        <property name="maxActive" value="${jdbc.maxActive}"/>           <!-- 连接池最大使用连接数量 -->
        <property name="minIdle" value="${jdbc.minIdle}"/>               <!-- 连接池最小空闲 -->
        <property name="maxWait" value="${jdbc.maxWait}"/>               <!-- 获取连接最大等待时间 -->
        <property name="validationQuery" value="${jdbc.validationQuery}"/>
        <property name="logAbandoned" value="${jdbc.logAbandoned}"/>    <!-- 关闭abanded连接时输出错误日志 -->
        <property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
        <property name="testOnBorrow" value="${jdbc.testOnBorrow}"/>
        <property name="testOnReturn" value="${jdbc.testOnReturn}"/>
        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}"/><!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}"/><!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="removeAbandoned" value="${jdbc.removeAbandoned}"/>                  <!-- 打开removeAbandoned功能 -->
        <property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}"/> <!-- 1800秒，也就是30分钟 -->
        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}"/> <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}"/>
    </bean>


    <!-- MyBatis配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath*:/mapper/*/*Mapper.xml"/>
        <property name="configLocation" value="classpath:/db/mybatis-config.xml"/>
    </bean>
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.carfree.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <!-- 缓存配置 -->
    <!--<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">-->
        <!--<property name="configLocation" value="classpath:db/ehcache-local.xml" />-->
    <!--</bean>-->



    <!-- 定义事务 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--事务模板 -->
    <bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
        <property name="transactionManager" ref="transactionManager" />
        <!--ISOLATION_DEFAULT 表示由使用的数据库决定  -->
        <property name="isolationLevelName" value="ISOLATION_DEFAULT" />
        <property name="propagationBehaviorName" value="PROPAGATION_REQUIRED" />
        <!-- <property name="timeout" value="30"/> -->
    </bean>
    <!-- 配置 Annotation 驱动，扫描@Transactional注解的类定义事务  -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
</beans>